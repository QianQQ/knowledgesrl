# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

# BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local-slave", "pass")]
c['protocols'] = {'pb': {'port': 9989}}

# CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
    'https://github.com/aymara/knowledgesrl.git',
    workdir='gitpoller-workdir', branch='master',
    pollinterval=300))

# SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["default builder"]))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=["default builder"]))

# BUILDERS

import re

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.status.results import FAILURE, SUCCESS, WARNINGS


class FrameNetKsrlRun(ShellCommand):

    def __init__(self, name, wanted_scores, extra_args=[], **kwargs):
        self.name = name
        self.wanted_f1, self.wanted_accuracy = wanted_scores
        command = ["../knowledgesrl-test/bin/python3", "main.py"]
        super(FrameNetKsrlRun, self).__init__(
            command=command + extra_args, workdir='build/src',
            timeout=3600, **kwargs)

        self.f1_score, self.accuracy_score = None, None

    def commandComplete(self, cmd):
        final_stats = False
        for line in cmd.logs['stdio'].getText().split('\n'):
            if line.startswith('## Final stats'):
                final_stats = True
            elif final_stats and line.startswith('Overall when role mapping applies'):
                str_scores = re.search('([0-9.]+)% F1, ([0-9.]+)% accuracy', line).groups()
                self.f1_score, self.accuracy_score = float(str_scores[0]), float(str_scores[1])

    def evaluateCommand(self, cmd):
        if cmd.didFail():
            return FAILURE
        elif self.f1_score < self.wanted_f1 or self.accuracy_score < self.wanted_accuracy:
            return FAILURE
        elif self.f1_score > self.wanted_f1 or self.accuracy_score > self.wanted_accuracy:
            return WARNINGS

        return SUCCESS

    def describe(self, done):
        if done:
            if self.f1_score is not None and self.accuracy_score is not None:
                return [self.name, 'F1:{}, acc:{}'.format(self.f1_score, self.accuracy_score)]
            else:
                return [self.name]
        else:
            return [self.name, 'srling...']

factory = BuildFactory()
factory.addStep(Git(
    repourl='https://github.com/aymara/knowledgesrl.git',
    mode='incremental', submodules=True))

class HideShellCommand(ShellCommand):
    def __init__(self, *args, **kwargs):
        super(HideShellCommand, self).__init__(
            *args, hideStepIf=lambda results, s: results == SUCCESS, **kwargs)

factory.addStep(HideShellCommand(command=["rm", "-rf", "knowledgesrl-test"]))
factory.addStep(HideShellCommand(command=["pyvenv-3.4", "knowledgesrl-test"]))
factory.addStep(HideShellCommand(command=[
    "knowledgesrl-test/bin/pip3", "install", "-r", "requirements.txt"]))

# Download resources
factory.addStep(HideShellCommand(command=[
    "knowledgesrl-test/bin/python3.4", "-m", "nltk.downloader", "wordnet", "verbnet"]))
# Use VerbNet from repository
factory.addStep(HideShellCommand(command=[
    "rm", "-rf", "/home/cygal/nltk_data/corpora/verbnet"]))
factory.addStep(HideShellCommand(command=[
    "ln", "-s", "data/verbnet", "/home/cygal/nltk_data/corpora/verbnet"]))

# Run tests
factory.addStep(ShellCommand(
    command=["knowledgesrl-test/bin/python3.4", "-m", "unittest", "discover", "tests"],
    env={'PYTHONPATH': 'src'}, description='unit testing', descriptionDone='unit test'))

configurations = [
    ('gold', [],                                                          (71.11, 54.66)),
    ('gold + passive', ['--passivize'],                                   (73.52, 57.20)),
    ('gold + proba', ['--model=predicate_slot'],                          (71.84, 58.57)),
    ('gold + proba + passive', ['--model=predicate_slot', '--passivize'], (74.05, 60.49)),
    ('gold + bootstrap', ['--bootstrap'],                                 (73.63, 69.41)),
    ('gold + bootstrap + passive', ['--passivize', '--bootstrap'],        (76.08, 72.09)),

    ('argid', ['--argument-identification'],                                   (42.92, 29.95)),
    ('argid + passive', ['--argument-identification', '--passivize'],          (44.28, 30.98)),
    ('argid + proba', ['--argument-identification', '--model=predicate_slot'], (43.25, 31.52)),
    ('argid + proba + passive', ['--argument-identification',
                                 '--model=predicate_slot', '--passivize'],     (44.56, 32.49)),
    ('argid + bootstrap', ['--argument-identification', '--bootstrap'],        (44.63, 37.98)),
]

for name, extra_args, wanted_scores in configurations:
    factory.addStep(FrameNetKsrlRun(name, extra_args=extra_args, wanted_scores=wanted_scores))

from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(name="default builder", slavenames=["local-slave"], factory=factory)
]

# STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz

authz_cfg = authz.Authz(
    forceAllBuilds=True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# PROJECT IDENTITY

c['title'] = "knowledgesrl"
c['titleURL'] = "https://github.com/aymara/knowledgesrl"

c['buildbotURL'] = "http://localhost:8010/"

# DB URL

c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
