# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

# BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local-slave", "pass")]
c['protocols'] = {'pb': {'port': 9989}}

# CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
    'https://github.com/aymara/knowledgesrl.git',
    workdir='gitpoller-workdir', branch='master',
    pollinterval=300))

# SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=["runtests"]))

# BUILDERS

import re

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.status.results import FAILURE, SUCCESS, WARNINGS


class FrameNetKsrlRun(ShellCommand):

    def __init__(self, name, wanted_scores, extra_args=[], **kwargs):
        self.name = name
        self.wanted_f1, self.wanted_accuracy = wanted_scores
        command = ["../knowledgesrl-test/bin/python3", "main.py"]
        super(FrameNetKsrlRun, self).__init__(command=command + extra_args, workdir='build/src')

        self.f1_score, self.accuracy_score = -1, -1

    def commandComplete(self, cmd):
        final_stats = False
        for line in cmd.logs['stdio'].getText().split('\n'):
            print(line)
            if line.startswith('## Final stats'):
                final_stats = True
            elif final_stats and line.startswith('Overall when role mapping applies'):
                str_scores = re.search('([0-9.]+)% F1, ([0-9.]+)% accuracy', line).groups()
                self.f1_score, self.accuracy_score = float(str_scores[0]), float(str_scores[1])
                print(self.f1_score, self.accuracy_score)

    def evaluateCommand(self, cmd):
        if cmd.didFail():
            return FAILURE
        elif self.f1_score < self.wanted_f1 or self.accuracy_score < self.wanted_accuracy:
            return FAILURE
        elif self.f1_score > self.wanted_f1 or self.accuracy_score > self.wanted_accuracy:
            return WARNINGS

        return SUCCESS

    def describe(self, done):
        if done:
            return [self.name, 'F1:{}, acc:{}'.format(self.f1_score, self.accuracy_score)]
        else:
            return [self.name, 'srling...']

factory = BuildFactory()
factory.addStep(Git(
    repourl='https://github.com/aymara/knowledgesrl.git',
    mode='incremental', submodules=True))

factory.addStep(ShellCommand(
    command=["rm", "-rf", "knowledgesrl-test"],
    hideStepIf=lambda results, s: results == SUCCESS))
factory.addStep(ShellCommand(
    command=["pyvenv", "knowledgesrl-test"],
    hideStepIf=lambda results, s: results == SUCCESS))
factory.addStep(ShellCommand(
    command=["knowledgesrl-test/bin/pip3", "install", "-r", "requirements.txt"],
    hideStepIf=lambda results, s: results == SUCCESS))

factory.addStep(FrameNetKsrlRun('gold', wanted_scores=[76.00, 62.56]))
factory.addStep(FrameNetKsrlRun(
    'auto', extra_args=['--no-gold-args'], wanted_scores=[47.31, 34.34]))
factory.addStep(FrameNetKsrlRun(
    'gold bootstrap', extra_args=['--bootstrap'], wanted_scores=[47.31, 37.34]))
factory.addStep(FrameNetKsrlRun(
    'auto bootstrap',
    extra_args=['--no-gold-args', '--bootstrap'],
    wanted_scores=[47.31, 37.34]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(
    name="runtests", slavenames=["local-slave"], factory=factory))

# STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz

authz_cfg = authz.Authz(
    forceAllBuilds=True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# PROJECT IDENTITY

c['title'] = "knowledgesrl"
c['titleURL'] = "https://github.com/aymara/knowledgesrl"

c['buildbotURL'] = "http://localhost:8010/"

# DB URL

c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
